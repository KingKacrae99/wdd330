Updated addProductToCart() with quantity check:

addProductToCart() {
    const cartItems = getLocalStorage("so-cart") || [];
    const existingItem = cartItems.find(item => item.Id === this.product.Id);

    if (existingItem) {
        // If item exists, increase its quantity
        existingItem.quantity = (existingItem.quantity || 1) + 1;
    } else {
        // If not, set quantity and add to cart
        this.product.quantity = 1;
        cartItems.push(this.product);
    }

    setLocalStorage("so-cart", cartItems);
}

Also, update your cart display code to use item.quantity:
In your cart rendering:

<p class="cart-card__quantity">qty: ${item.quantity || 1}</p>

And in updateTotal() or similar:

const total = cartItems.reduce((sum, item) => sum + item.FinalPrice * (item.quantity || 1), 0);

Task 2 Add the ability to change the quantity of a product desired in the cart.

function cartItemTemplate(item) {
  const newItem = `<li class="cart-card divider" data-id="${item.Id}">
    <a href="#" class="cart-card__image">
      <img src="${item.Image}" alt="${item.Name}" />
    </a>
    <a href="#">
      <h2 class="card__name">${item.Name}</h2>
    </a>
    <p class="cart-card__color">${item.Colors[0].ColorName}</p>
    
    <div class="cart-card__quantity-controls">
      <button class="decrease-qty" data-id="${item.Id}">−</button>
      <span class="cart-card__quantity">qty: ${item.quantity || 1}</span>
      <button class="increase-qty" data-id="${item.Id}">+</button>
    </div>

    <p class="cart-card__price">$${item.FinalPrice}</p>
  </li>`;
  return newItem;
}

buttons and functionality

function setupQuantityButtons() {
  document.querySelectorAll(".increase-qty").forEach(button => {
    button.addEventListener("click", () => updateQuantity(button.dataset.id, 1));
  });

  document.querySelectorAll(".decrease-qty").forEach(button => {
    button.addEventListener("click", () => updateQuantity(button.dataset.id, -1));
  });
}

function updateQuantity(productId, change) {
  const cart = getLocalStorage("so-cart");
  const itemIndex = cart.findIndex(item => item.Id == productId);

  if (itemIndex !== -1) {
    cart[itemIndex].quantity = (cart[itemIndex].quantity || 1) + change;

    // Elimina el producto si la cantidad es menor o igual a 0
    if (cart[itemIndex].quantity <= 0) {
      cart.splice(itemIndex, 1);
    }

    setLocalStorage("so-cart", cart);
    renderCart(); // debes tener esta función para volver a renderizar el carrito
  }
}